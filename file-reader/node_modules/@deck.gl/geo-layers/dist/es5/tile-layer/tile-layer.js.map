{"version":3,"sources":["../../../src/tile-layer/tile-layer.js"],"names":["defaultProps","renderSubLayers","type","value","props","GeoJsonLayer","getTileData","x","y","z","Promise","resolve","onViewportLoaded","optional","onTileError","err","console","error","maxZoom","minZoom","maxCacheSize","TileLayer","state","tiles","isLoaded","changeFlags","somethingChanged","oldProps","context","tileCache","updateTriggersChanged","finalize","TileCache","maxSize","onTileLoad","_onTileLoad","bind","_onTileError","setState","viewport","viewportChanged","id","getLayerZoomLevel","update","currTiles","filter","tile","allCurrTilesLoaded","every","_data","map","info","sourceLayer","Math","floor","zoom","Number","isFinite","ceil","visible","isVisible","layer","Object","assign","data","clone","CompositeLayer","layerName"],"mappings":"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","sourcesContent":["import {CompositeLayer} from '@deck.gl/core';\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport TileCache from './utils/tile-cache';\n\nconst defaultProps = {\n  renderSubLayers: {type: 'function', value: props => new GeoJsonLayer(props)},\n  getTileData: {type: 'function', value: ({x, y, z}) => Promise.resolve(null)},\n  // TODO - change to onViewportLoad to align with Tile3DLayer\n  onViewportLoaded: {type: 'function', optional: true, value: null},\n  // eslint-disable-next-line\n  onTileError: {type: 'function', value: err => console.error(err)},\n  maxZoom: null,\n  minZoom: 0,\n  maxCacheSize: null\n};\n\nexport default class TileLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      tiles: [],\n      isLoaded: false\n    };\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({props, oldProps, context, changeFlags}) {\n    let {tileCache} = this.state;\n    if (!tileCache || changeFlags.updateTriggersChanged) {\n      const {getTileData, maxZoom, minZoom, maxCacheSize} = props;\n      if (tileCache) {\n        tileCache.finalize();\n      }\n      tileCache = new TileCache({\n        getTileData,\n        maxSize: maxCacheSize,\n        maxZoom,\n        minZoom,\n        onTileLoad: this._onTileLoad.bind(this),\n        onTileError: this._onTileError.bind(this)\n      });\n      this.setState({tileCache});\n    }\n    const {viewport} = context;\n    if (changeFlags.viewportChanged && viewport.id !== 'DEFAULT-INITIAL-VIEWPORT') {\n      const z = this.getLayerZoomLevel();\n      tileCache.update(viewport);\n      // The tiles that should be displayed at this zoom level\n      const currTiles = tileCache.tiles.filter(tile => tile.z === z);\n      this.setState({isLoaded: false, tiles: currTiles});\n      this._onTileLoad();\n    }\n  }\n\n  _onTileLoad() {\n    const {onViewportLoaded} = this.props;\n    const currTiles = this.state.tiles;\n    const allCurrTilesLoaded = currTiles.every(tile => tile.isLoaded);\n    if (this.state.isLoaded !== allCurrTilesLoaded) {\n      this.setState({isLoaded: allCurrTilesLoaded});\n      if (allCurrTilesLoaded && onViewportLoaded) {\n        onViewportLoaded(currTiles.filter(tile => tile._data).map(tile => tile._data));\n      }\n    }\n  }\n\n  _onTileError(error) {\n    this.props.onTileError(error);\n    // errorred tiles should not block rendering, are considered \"loaded\" with empty data\n    this._onTileLoad();\n  }\n\n  getPickingInfo({info, sourceLayer}) {\n    info.sourceLayer = sourceLayer;\n    info.tile = sourceLayer.props.tile;\n    return info;\n  }\n\n  getLayerZoomLevel() {\n    const z = Math.floor(this.context.viewport.zoom);\n    const {maxZoom, minZoom} = this.props;\n    if (Number.isFinite(maxZoom) && z > maxZoom) {\n      return Math.floor(maxZoom);\n    } else if (Number.isFinite(minZoom) && z < minZoom) {\n      return Math.ceil(minZoom);\n    }\n    return z;\n  }\n\n  renderLayers() {\n    const {renderSubLayers, visible} = this.props;\n    const z = this.getLayerZoomLevel();\n    return this.state.tileCache.tiles.map(tile => {\n      // For a tile to be visible:\n      // - parent layer must be visible\n      // - tile must be visible in the current viewport\n      // - if all tiles are loaded, only display the tiles from the current z level\n      const isVisible = visible && tile.isVisible && (!this.state.isLoaded || tile.z === z);\n      // cache the rendered layer in the tile\n      if (!tile.layer) {\n        tile.layer = renderSubLayers(\n          Object.assign({}, this.props, {\n            id: `${this.id}-${tile.x}-${tile.y}-${tile.z}`,\n            data: tile.data,\n            visible: isVisible,\n            tile\n          })\n        );\n      } else if (tile.layer.props.visible !== isVisible) {\n        tile.layer = tile.layer.clone({visible: isVisible});\n      }\n      return tile.layer;\n    });\n  }\n}\n\nTileLayer.layerName = 'TileLayer';\nTileLayer.defaultProps = defaultProps;\n"],"file":"tile-layer.js"}